#Archival light-level geolocator workshop
#
# Oct 29 - Oct 30 2015
# led by Michael T. Hallworth 
# Smithsonian Migratory Bird Center
# Script and notes below.
#
# Set-up--------------------------------------------------------------------------------------------------------------
# Check to make sure the required packages are installed on your machine
# If not, they will be installed


reqPackages <- c("devtools","digest","GeoLight","geosphere","raster","fields","forecast",
                 "circular","truncnorm","parallel","bit","rgdal","CircStats","Rcpp",
                 "RcppArmadillo","ggmap","ggsn","sp","maptools","rgeos","MASS")


get.packages <- reqPackages[!(reqPackages %in% installed.packages()[,"Package"])]

if(length(get.packages)>0){
  install.packages(get.packages,repos = "https://cloud.r-project.org/", dependencies = TRUE)
}

# Install necessary packages from Github using the devtools library #
install_github("SWotherspoon/SGAT")
install_github("SLisovski/TwGeos") 
install_github("SLisovski/GeoLight", ref = "Update_2.01", force = T)
install_github("eldarrak/FLightR")

library(devtools)
library(GeoLight)
library(TwGeos)
library(SGAT)
library(FLightR)
library(MASS)  #needed for fitting distributions
library(maptools)
library(BAStag)
library(sp)

# read in a simple world map from the maptools package #
data(wrld_simpl)                             

setwd = ("T:/McDuffie/SOSA_Geo/SOSA_R/SOSA_589")

list.files(path = "T:/McDuffie/SOSA_GEO/SOSA_R/SOSA_589", pattern = NULL, all.files = FALSE,
           full.names = FALSE, recursive = FALSE,
           ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)

#For Intigeo geos: read the data into a dataframe called d.lux
d.lux <- readMTlux("T:/McDuffie/SOSA_GEO/SOSA_R/SOSA_589/Z589_13Jun17_021544.lux") 

# Save only the columns named Date and Light
d.lux<-d.lux[,c("Date","Light")]

# Show first few lines of the data 
head(d.lux)

#Twilight adjustments--------------------------------------------------------------------------------------------------

# Set the capture coordinates for each bird #
CapLocs <- c(-149.750179,  61.284619)
cap.lat <-61.28
cap.long <- -149.75


# Set the seed
# The time when we know the geolocator recorded no light.
seed <- as.POSIXct(c(rep("2016-12-01 04:00:00", 3), rep("2017-01-01 04:00:00",
8), rep("2017-02-01 04:00:00", 4)), format = "%Y-%m-%d %H:%M:%S", tz = "GMT")

twl  <- findTwilights(tagdata = d.lux, 
                      threshold = 1.5, 
                      include = seed,
                      dark.min = 0) # minimum dark period in minutes

# Create a vector of the dates the geolocator was recording data
tm <- seq(d.lux[1,1], d.lux[nrow(d.lux),1], by = "day")
head (tm)
# Create a vector of TRUE /FALSE to determine whether it's sunrise or sunset
rise <- rep(c(TRUE, FALSE), length(tm))

#Edit the transitions
#Moves or deletes outliers
twl <- twilightEdit(twilights = twl, 
                    window = 4,           # two days before and two days after
                    outlier.mins = 45,    # difference in mins
                    stationary.mins = 25, # are the other surrounding twilights within 25 mins of one another
                    plot = TRUE)

#In order to take advantage of the edits - you can subset the data using when Deleted == FALSE this removes 
#any of the twilights which were deleted.
#Here we adjust the twilight time back to account for the max light level readings every # minutes
twl <- twilightAdjust(twilights = twl, 
                      interval = 300) # The unit here is seconds

twl <- subset(twl, Deleted == FALSE)

# Zenith Angle--------------------------------------------------------------------------------------------------

# Create a vector with the dates known to be at deployment 
calib.dates <- as.POSIXct(c("2016-06-13","2017-06-01"))

# Extract twilight data during calibration period
cal.data<-subset(twl,twl$Twilight>=calib.dates[1] & twl$Twilight<=calib.dates[2])

# Determine the sun elevation angle - here called the Zenith angle #
# Calculate solar time from calibration data 
sun  <- solar(cal.data[,1])

# Adjust the solar zenith angle for atmospheric refraction
z<- refracted(zenith(sun = sun,
                          lon = CapLocs[1],
                          lat = CapLocs[2]))

twl_t <- twilight(cal.data[,1], CapLocs[1], CapLocs[2], rise = cal.data[,2], zenith = quantile(z,probs=0.5))

# Determine the difference in minutes from when the sun rose and the geolocator said it rose 
twl_dev <- ifelse(cal.data$Rise, as.numeric(difftime(cal.data[,1], twl_t, units = "mins")),
                  as.numeric(difftime(twl_t, cal.data[,1], units = "mins")))

# Throw out values less than 0 - These values are not valid 
twl_dev<-subset(twl_dev, subset=twl_dev>=0)

# Describe the distribution of the error 
fitml <- fitdistr(twl_dev, "log-Normal")
head (fitml)

# save the Twilight model parameters
alpha<- c(fitml$estimate[1], fitml$estimate[2]) 
head (alpha)

# Make some plots to visualize the data 
seq <- seq(0,60, length = 100)
hist(twl_dev, freq = F,
     yaxt="n",
     ylim = c(0, 0.15),
     xlim = c(0, 60),
     breaks=15,
     main = "",
     xlab = "Twilight error (mins)")
axis(2,las=2)
lines(seq, dlnorm(seq, alpha[1], alpha[2]), col = "firebrick", lwd = 3,lty = 2)
#look at plot to see fit of data matches red dotted line, if not adjust fitml = "log-normal" to either normal or gamma

# Store the zenith (sun-elevation angle)
zenith0 <-quantile(z,prob=0.5)
zenith1 <-quantile(z,prob=0.95)

#Zenith angle plot
par(bty="l")
plot(median(z,na.rm=TRUE),ylim = c(80,120),pch=19,cex=1.25,ylab="Zenith Angle")
segments(1,quantile(z,probs=0.025),1,quantile(z,probs=0.95))
points(1,max(z,na.rm=TRUE),col="red",pch=20)

# Initial Locations----------------------------------------------------------------------------------------------

# How to set tolernace values around equinox for South America. #####################################################

# Obtain the initial path based on a simple threshold analysis
d.twl <-subset(twl,twl$Twilight>=calib.dates[1] & !Deleted)
path <- thresholdPath(d.twl$Twilight, d.twl$Rise, zenith=zenith0 ,tol=0)

par(mfrow=c(3,1),mar = c(2,4,1,1)+0.1)
plot(path$time, path$x[, 2], type = "b", pch = 16, cex = 0.5, ylab = "Lat", xlab = '')
abline(h = cap.lat)
abline(v = as.POSIXct("2016-09-23"),col="red",lty=2,lwd=1.5)
abline(v = as.POSIXct("2017-03-20"),col="red",lty=2,lwd=1.5)

plot(path$time, path$x[,1],type="b",pch=16,cex=0.5,ylab="Long",xlab="")
abline(h = cap.long)
abline(v = as.POSIXct("2016-09-23"),col="red",lty=2,lwd=1.5)
abline(v = as.POSIXct("2017-03-20"),col="red",lty=2,lwd=1.5)

plot(path$x, type = "n",ylim=c(0,60),xlim=c(-100,-55))
plot(wrld_simpl, add = T, col = "grey95")
lines(path$x, col = "blue")
points(path$x, pch = 16, cex = 0.5, col = "blue")

#Take the location estimates created above
x0<- path$x

# the model also needs the mid-points - generate those here
z0<- trackMidpts(x0)

# Set flight parameters
beta <- c(0.7, 0.08)

# This function sets the known location of the bird - capture location and recapture location
# This is where you can add ancillary resighting events; known locations throughout annual cycle
fixedx<- rep(F, nrow(x0))
fixedx[1:5] <- T
fixedx[(nrow(x0)-5):nrow(x0)] <- T

x0[fixedx, 1] <- cap.long
x0[fixedx, 2] <- cap.lat

# Set what xlim and ylim values you need to span the range of your dataset
xlim <- c(-115, -60)
ylim <- c(0, 90)

# Spatial Mask (do not use for shorebirds)

#Estelle Model#########################################################################################################

#The threshold.model function requires the following:
# 1)the twilight times and whether they are sunrise or sunset
# 2)a modified Log Normal model for the twilight errors (with relaxed assumptions to tune the proposals)
# 3)the parameters of the distribution of twilight errors (alpha)
# 4)the parameters of the distribution of travel speed (beta)
# 5)optional: the spatial mask
# 6)the initial x and z, and
# 7)the zenith angle that defines twilight.

model<- thresholdModel(d.twl$Twilight,d.twl$Rise,
                       twilight.model="ModifiedLogNormal",
                       alpha=alpha,
                       beta=beta,
                       x0=x0,
                       z0=z0,
                       zenith=zenith0,
                       fixedx=fixedx)
# Here you need to set the first few locations as "known locations"-fixed locations. These are periods  
# when you know the bird was at a specific location - capture site - when first deployed and captured. 

model$fixedx<-c(model$fixedx,rep(FALSE,(dim(model$x0)[1]-length(model$fixedx))))

model$fixedx[(length(model$fixedx)-3):length(model$fixedx)]<-TRUE

# This defines the error distribution around each location 

proposal.x <- mvnorm(S=diag(c(0.0025,0.0025)),n=nlocation(x0))
proposal.z <- mvnorm(S=diag(c(0.0025,0.0025)),n=nlocation(z0))          

fit <- estelleMetropolis(model = model,
                         proposal.x = proposal.x,
                         proposal.z = proposal.z,
                         iters=200, # This value sets the number of iterations to run
                         thin=5,
                         chains=3)

xsum <- locationSummary(fit$x,collapse = TRUE)
zsum <- locationSummary(fit$z,collapse = TRUE)

x0 = cbind(xsum$'Lon.50%',xsum$'Lat.50%')
z0 = cbind(zsum$'Lon.50%',zsum$'Lat.50%')

fit <- estelleMetropolis(model = model,
                              proposal.x = proposal.x,
                              proposal.z = proposal.z,
                              x0 = x0,
                              z0 = z0,
                              iters=200, # This value sets the number of iterations to run
                              thin=5,
                              chains=3)

#Final Run

xsum<-locationSummary(fit$x,collapse = TRUE)
zsum<-locationSummary(fit$z,collapse = TRUE)

proposal.x <- mvnorm(chainCov(fit$x),s=0.1)
proposal.z <- mvnorm(chainCov(fit$z),s=0.1)

fit <- estelleMetropolis(model = model,
                         proposal.x = proposal.x,
                         proposal.z = proposal.z,
                         x0 = x0,
                         z0 = z0,
                         iters=500, # This value sets the number of iterations to run
                         thin=10,
                         chains=3)

#Plot--------------------------------------------------------------------------------------------------------------

#This step makes an empty raster #
r <- raster(xmn = xlim[1], xmx = xlim[2], ymn = ylim[1], ymx = ylim[2], res = c(0.25,
                                                                                0.25))
# set plot parameters 
xlim = c(-180, 0)
ylim = c(-60, 80)
opar <- par(mar=c(2,2,2,2)+0.1)

# summary location from the model - 
s <- locationSummary(fit$x,time=model$time,collapse=T)

# set fixed locations - 
fixedz<- fixedx[-length(fixedx)] > 0 & fixedx[-length(fixedx)]==fixedx[-1]

# if fixed - set value to 0 if not use model dt
dt <- ifelse(fixedz,0,model$dt)

# Create the location image using the intermediate location
im <- locationImage(fit$z,xlim=xlim,ylim=ylim,nx=4*diff(xlim),ny=4*diff(ylim),
                    weight=dt,collapse=TRUE)

# Plot
opar <- par(mar=c(2,2,2,2)+0.1)
plot(NA, xlim = range(im$x), ylim = range(im$y), xlab = "Longitude", ylab = "Latitude")
plot(wrld_simpl,col= "grey90",border="grey10", add = T)
image(im$x,im$y,im$W,xlab="",ylab="",cex.axis=0.7, add = T, col = c("transparent", rev(topo.colors(100))))

plot(wrld_simpl, add = T)

lines(s$Lon.mean, s$Lat.mean,col=rgb(t(col2rgb("firebrick"))/255,alpha=0.5))
points(s$Lon.mean, s$Lat.mean,pch=16,cex=0.5,col=rgb(t(col2rgb("firebrick"))/255,alpha=0.2))
points(cap.long, cap.lat, pch = 22, bg = "white")
par(opar)

## Let's view the data by month as 2D histograms.
## First create an empty background raster
r <- raster(nrows = 80, ncols = 100, xmn = xlim[1], xmx = xlim[2], ymn = ylim[1], ymx = ylim[2])
## The slices function in SGAT can cut your data up into days, weeks, months, etc.
S <- slices(type = "intermediate", weights = rep(0.5, length(fit$time)),
                 breaks = "months", mcmc = fit, grid = r, include.lowest = FALSE, right = FALSE)

opar <- par(mfrow = c(4,3), mar = c(0,0,0,0), oma = c(0.4,0.4,0.4,0.4))
for (k in sliceIndices(s)) {   #loop through the slices to plot the data
  tm <- sliceInterval(s, k)    
  sk <- slice(s, k)
  plot(NA, xlim = range(im$x), ylim = range(im$y), xaxt = "n", yaxt = "n", xlab = "", ylab  = "")
  plot(wrld_simpl, col = "grey95", add = T)
  plot(sk, add = T, col = rev(heat.colors(64, alpha = 0.7)), useRaster = F, legend = F)
  
  mtext(sprintf("%s - %s", as.Date(tm[1]), as.Date(tm[2])), 1, line = -2, cex = 0.8)
}
par(opar)

#Wish List-------------------------------------------------------------------------------------------------
#Plot maps for a single southboaund and single north bound migration route.
#Plot maps on satellite imagery with state and country borders.
#Determine and then Plot important stop-over locations
#Set tolerance values for South American equinox to remove erroneous migration paths.
#What is the ideal number of iterations to have for the MCMC model?

#END-------------------------------------------------------------------------------------------------------
